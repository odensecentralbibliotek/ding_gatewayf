<?php
/**
 * @file
 * Handle user self registration after login into gatewayf.
 */

define('DING_GATEWAYF_REGISTRATION_ACCEPTANCE_URL', 'gatewayf/registration/acceptance');
define('DING_GATEWAYF_REGISTRATION_INFORMATION_URL', 'gatewayf/registration/information');
define('DING_GATEWAYF_REGISTRATION_SUCCESS_URL', 'gatewayf/registration/success');

/**
 * Implements hook_menu().
 */
function ding_gatewayf_registration_menu() {
  $items = array();

  $items[DING_GATEWAYF_REGISTRATION_INFORMATION_URL] = array(
    'page callback' => 'ding_gatewayf_registration_information',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[DING_GATEWAYF_REGISTRATION_ACCEPTANCE_URL] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_gatewayf_registration_acceptance_form'),
    'access callback' => 'ding_gatewayf_registration_acceptance_access_check',
    'type' => MENU_CALLBACK,
  );

  $items[DING_GATEWAYF_REGISTRATION_SUCCESS_URL] = array(
    'page callback' => 'ding_gatewayf_registration_success',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Check that gatewayf login attributes have been set in the session.
 *
 * The acceptance page should not be accessible if the user have not logged in
 * using gatewayf.
 *
 * @return bool
 *   TRUE if attributes exists in the session else FALSE.
 */

function ding_gatewayf_registration_acceptance_access_check() {
  return isset($_SESSION[DING_GATEWAYF_ATTRIBUTES]);
}

/**
 * Implements hook_theme().
 */
function ding_gatewayf_registration_theme($existing, $type, $theme, $path) {
  return array(
    'ding_gatewayf_registration_link' => array(
      'template' => 'ding-gatewayf-registration-link',
      'variables' => array(
        'link' => NULL,
      ),
      'path' => $path . '/templates',
    ),
    'ding_gatewayf_registration_information' => array(
      'template' => 'ding-gatewayf-registration-information',
      'variables' => array(
        'title' => array(),
        'content' => array(),
        'link' => NULL,
      ),
      'path' => $path . '/templates',
    ),
    'ding_gatewayf_registration_success_page' => array(
      'template' => 'ding-gatewayf-registration-success',
      'variables' => array(
        'title' => array(),
        'content' => array(),
      ),
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ding_gatewayf_registration_block_info() {
  return array(
    'registration' => array(
      'info' => t('Ding GateWAYF self registration link'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function ding_gatewayf_registration_block_view() {
  $block = new stdClass();

  $block->content = array(
    '#theme' => 'ding_gatewayf_registration_link',
    '#link' => array(
      '#theme' => 'link',
      '#text' => t('Create user'),
      '#path' => DING_GATEWAYF_REGISTRATION_INFORMATION_URL,
      '#options' => array(
        'attributes' => array(
          'class' => array('ding-gatewayf-registration-link'),
        ),
        'html' => TRUE,
      ),
    ),
  );

  return $block;
}

/**
 * Implements hook_form_ding_gatewayf_admin_settings_form_alter().
 */
function ding_gatewayf_registration_form_ding_gatewayf_admin_settings_form_alter(&$form, &$form_state, $form_id) {

  $defaults = _ding_gatewayf_registration_load_config();

  $form['ding_gatewayf_registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Self registration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['ding_gatewayf_registration']['age_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Age limit'),
    '#description' => t('The age limit will be used to ensure that no user is created without begin above the limit. If left empty no age limit is enforced.'),
    '#default_value' => $defaults['age_limit'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // Define before create info page.
  $form['ding_gatewayf_registration']['information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Information page'),
    '#description' => t('Information displayed before the user starts the self registration page. This could be information about the rules for self registration and links to the library regulations.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['ding_gatewayf_registration']['information']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Page title'),
    '#default_value' => $defaults['information']['title'],
  );

  $form['ding_gatewayf_registration']['information']['content'] = array(
    '#type' => 'text_format',
    '#title' => t('Content'),
    '#default_value' => $defaults['information']['content']['value'],
    '#format' => $defaults['information']['content']['format'],
  );

  $form['ding_gatewayf_registration']['information']['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link title'),
    '#default_value' => $defaults['information']['link'],
  );

  // Accepting text.
  $form['ding_gatewayf_registration']['acceptance'] = array(
    '#type' => 'fieldset',
    '#title' => t('Acceptance page'),
    '#description' => t('Before the user can be created we need to get basic contact information and the user needs to accept regulations.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['ding_gatewayf_registration']['acceptance']['description'] = array(
    '#type' => 'text_format',
    '#title' => t('Acceptance text'),
    '#description' => t('Description displayed next to the user acceptance check box.'),
    '#default_value' => $defaults['acceptance']['description']['value'],
    '#format' => $defaults['acceptance']['description']['format'],
  );

  // Define after create info page.
  $form['ding_gatewayf_registration']['success'] = array(
    '#type' => 'fieldset',
    '#title' => t('Successful registration page'),
    '#description' => t('Information displayed after the user have been successful registered at the provider.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['ding_gatewayf_registration']['success']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $defaults['success']['title'],
  );

  $form['ding_gatewayf_registration']['success']['content'] = array(
    '#type' => 'text_format',
    '#title' => t('Content'),
    '#default_value' => $defaults['success']['content']['value'],
    '#format' => $defaults['success']['content']['format'],
  );
}

/**
 * Generate render array for the information page.
 *
 * @return array
 *   Render array with the page content.
 */
function ding_gatewayf_registration_information() {
  $config = _ding_gatewayf_registration_load_config();

  // Set page title to the same as the pages headline.
  drupal_set_title($config['information']['title']);

  return array(
    '#theme' => 'ding_gatewayf_registration_information',
    '#title' => $config['information']['title'],
    '#content' => $config['information']['content']['value'],
    '#link' => array(
      '#theme' => 'link',
      '#text' => $config['information']['link'],
      '#path' => DING_GATEWAYF_LOGIN_URL,
      '#options' => array(
        'attributes' => array(
          // This class "form-submit" is used to make the link look and behave
          // link a button.
          'class' => array(
            'form-submit',
            'ding-gatewayf-link',
          ),
        ),
        'query' => array(
          'destination' => DING_GATEWAYF_REGISTRATION_ACCEPTANCE_URL,
        ),
        'html' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_form().
 */
function ding_gatewayf_registration_acceptance_form() {
  $config = _ding_gatewayf_registration_load_config();

  // This is a little hack to get around the panels design requirements of the
  // ddbasic theme.
  $form = array(
    '#prefix' => '<div class="default-layout"><div class="layout-wrapper">',
    '#suffix' => '<br /></div></div>',
  );

  $form['accept'] = array(
    '#type' => 'checkbox',
    '#title' => t('I accept the user agreements'),
    '#description' => $config['acceptance']['description']['value'],
    '#required' => TRUE,
  );

  $form['sms'] = array(
    '#type' => 'textfield',
    '#title' => t('Telefon nummer'),
    '#description' => t('Indtast dit tlf. nr.'),
    '#maxlength' => 10,
    '#required' => TRUE,
    '#attributes' => array(
      'autocomplete' => 'off',
    ),
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#description' => t('The Email address that we can use to get in contact with you.'),
    '#required' => TRUE,
    '#attributes' => array(
      // Auto-complete is disabled here as the registration may be preform on a
      // public computer in the library and information about which user there
      // is registered and the mail address is classified information.
      'autocomplete' => 'off',
    ),
  );
  

  // Get branch options form the active provider.
  global $user;
  $provider = _ding_provider_get_provider('reservation');
  $options = ding_provider_invoke('reservation', 'options', $user);
  $form['branch'] = $options['preferred_branch'];
  $form['branch']['#required'] = TRUE;

  $form['pin'] = array(
    '#type' => 'password',
    '#title' => t('Pin code'),
    '#description' => t('Pin code with an max length of %length', array('%length' => ding_user_get_pincode_length())),
    '#maxlength' => ding_user_get_pincode_length(),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
    '#attributes' => array(
      'autocomplete' => 'off',
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create me'),
  );

  // Link cancel button to gatewayf logout to ensure that the user is signed
  // out correctly.
  $form['cancel'] = array(
    '#markup' => l(t('Cancel'), DING_GATEWAYF_LOGOUT_URL, array('attributes' => array('class' => 'ding-gatewayf--cancel'))),
  );
  
  $form['#submit'] = array('ding_gatewayf_registration_acceptance_form_submit');
  
  return $form;
}

/**
 * Submit handler for the acceptance form.
 *
 * It tries to create the user at the provider and redirect the user.
 */
function ding_gatewayf_registration_acceptance_form_submit($form, $form_state) {
  $values = $form_state['values'];

  // This value was not store in the form to ensure that the user can reload the
  // form.
  $required_attributes = array(
    'schacPersonalUniqueID' => array(
      'field' => 'CPR',
      'authname' => TRUE,
    ),
  );
  $wayf_attributes = $_SESSION[DING_GATEWAYF_ATTRIBUTES]; //
  //$wayf_attributes = array('schacPersonalUniqueID' => array('urn:mace:terena.org:schac:personalUniqueID:dk:CPR:' . '2408432321'));
  
  $required_attributes = _ding_gatewayf_get_required_attributes($wayf_attributes, $required_attributes);
  unset($_SESSION[DING_GATEWAYF_ATTRIBUTES]);

  // Check that the logged in user is over the age limit.
  if (!_ding_gatewayf_registration_is_age_limit_met($required_attributes['schacPersonalUniqueID'])) {
    $config = _ding_gatewayf_registration_load_config();
    drupal_set_message(t('You are not allowed to automatically be created because of the age limit (!limit years). Please go to your local library to registry.', array('!limit' => $config['age_limit'])));

    // Logout the user from gatewayf.
    ding_gatewayf_logout();
    return;
  }

  // Try to create the user at the provider.
  try {
    // Call to serviceplatform
    //global $serviceplatformen; -> not needed
    $cpr = $required_attributes['schacPersonalUniqueID'];
    $serviceplatformen = serviceplatformen_get_address($cpr); //-> not needed.
    // Create user.
    ding_provider_invoke('user','create',$cpr, $values['pin'], $serviceplatformen['name'], $values['mail'], $values['branch'],$values['sms']);
    //alma_client_invoke('self_register', $cpr, $values['pin'], $serviceplatformen['name'], $serviceplatformen['road'] . ', ' . $serviceplatformen['postdistrikt'], $serviceplatformen['zipcode'], $values['mail'], $values['branch'], $values['sms']);

    //ding_gatewayf_registration_update_library_patrons($serviceplatformen);

    global $base_url;

    // Send mail to user
    ding_gatewayf_dk_registration_drupal_mail('default_from', $values['mail'], 'Låner ved ' . variable_get('site_name', 'Biblioteket'), '<p>Hej
      <p>Du er nu oprettet som låner ved ' .variable_get('site_name', 'Biblioteket'). '. Du kan reservere og låne materialer på alle biblioteker i kommunen.
      <p>Dit brugernavn er dit cpr-nummer. Din pinkode er den kode du valgte, da du oprettede dig via hjemmesiden.
      <p>Hvis du er bosat uden for kommunen skal du være opmærksom på, at du ikke kan benytte bibliotekets netmedier.
      Brug af bibliotekets netmedier forudsætter, at du er bosat i kommunen.
      <p>Med venlig hilsen<br>
      '.variable_get('site_name', 'Biblioteket').' - <a href="mailto:'.variable_get('site_mail', '').'">'.variable_get('site_mail', '').'</a><br>
      ' .$base_url);

    $_REQUEST['destination'] = DING_GATEWAYF_REGISTRATION_SUCCESS_URL;
    _ding_gatewayf_provider_login($wayf_attributes);

    // Clean out message from the login form. Provider do not always allow login
    // at once, so the login attempt above may fail. But we have tried.
    drupal_get_messages(NULL, TRUE);
  }
  catch (Exception $exception) {
    // @TODO: The exception thrown by the providers to say that a user already
    //         exists is provider "named", hence for now we capture all
    //         exceptions. This should be fixed with FBS.
    drupal_set_message(t('You already have an user account at the library. So we have just logged you in.'));
    _ding_gatewayf_provider_login($wayf_attributes);
  }
}

/*
 * Calculate borrower category
 */
function ding_gatewayf_registration_update_library_patrons($serviceplatformen) {
   global $serviceplatformen;

   $adults = array (
      'ours' => variable_get('serviceplatformen_adults_ours'),
      'notours' => variable_get('serviceplatformen_adults_notours'),
    );

   $children = array (
      'ours' => variable_get('serviceplatformen_children_ours'),
      'notours' => variable_get('serviceplatformen_children_notours'),
     );

   $not_known_postcode    = 9999;
   $not_known_municipalno = '0000';
   $our_municipalno       = variable_get('serviceplatformen_our_municipalno');
   $cat_limit_age_years   = 14;
   $selfreg_cat           = variable_get('serviceplatformen_selfreg_cat');
   
   if ( substr( $serviceplatformen['KOMKOD'], 0, 1 ) == 0 ) { // if the first character is a 0 then:
       $serviceplatformen['KOMKOD'] = substr( $serviceplatformen['KOMKOD'], 1 ); // take the string starting at the 2nd character (starts with 0,1,2,3,4)
   }

   $age = ding_gatewayf_registration_cpr_to_age($serviceplatformen['cpr']);

   $ageidx = $age >= $cat_limit_age_years ? $adults : $children;

   if ($not_known_postcode == $serviceplatformen['zipcode']) {
        $serviceplatformen['KOMKOD'] = substr( $not_known_municipalno, 1 );
   }

   if ( $serviceplatformen['KOMKOD'] == $not_known_municipalno ) {
        $cat = $selfreg_cat;
        } elseif ( $serviceplatformen['KOMKOD'] == $our_municipalno )  {
        $cat = $ageidx['ours'];
        } else {
        $cat = $ageidx['notours'];
   }

   if (!$fp = fsockopen(variable_get('serviceplatformen_libra_ip'), variable_get('serviceplatformen_libra_port'))) return '';
   fputs($fp, '<?xml version="1.0" encoding="iso-8859-1"?><transaction><request><patron><update><cat>'. $cat .'</cat><municipalno>'. $serviceplatformen['KOMKOD'] .'</municipalno><tickno>'. $serviceplatformen['cpr'] ."</tickno></update></patron></request></transaction>\n\t");
   $response = '';
   while ($line = fgets($fp)) $response .= $line;
   fclose($fp);
}

/*
* Calculate age from cpr
*/
function ding_gatewayf_registration_cpr_to_age($cpr) {

    $year = substr($cpr, 4, 2);
    switch (substr($cpr, 6, 1)) {
            case 0: case 1: case 2: case 3: $year = '19' . $year; break;
            case 4: case 9: $year = ($year < 37) ? '20' . $year: '19' . $year; break;
            default: $year = ($year < 37) ? '20' . $year: '18' . $year; break;
    }
    if (!checkdate(substr($cpr, 2, 2), substr($cpr, 0, 2), $year)) return 0;
    return date('Y') - $year - ( date('m') . date('d') < substr($cpr, 2, 2) . substr($cpr, 0, 2) ? 1 : 0 );
}

/**
 * Simple wrapper function for drupal_mail() to avoid extraneous code.
 */
function ding_gatewayf_dk_registration_drupal_mail($from = 'default_from', $to, $subject, $message) {
  $my_module = 'ding_wayf_dk_create_user';
  $my_mail_token = microtime();
  if ($from == 'default_from') {
    // Change this to your own default 'from' email address.
    $from = variable_get('site_mail', 'My Email Address <it-udvikling@fynbib.dk>');
  }
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'to' => $to,
    'subject' => $subject,
    'body' => array($message),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    ),
  );
  
  $system = drupal_mail_system($my_module, $my_mail_token);
  $message = $system->format($message);
  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Render the success page displayed after self registration.
 *
 * @return array
 *   Render array with the page to display.
 */
function ding_gatewayf_registration_success() {
  $config = _ding_gatewayf_registration_load_config();

  return array(
    '#theme' => 'ding_gatewayf_registration_success_page',
    '#title' => $config['success']['title'],
    '#content' => $config['success']['content']['value'],
  );
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_gatewayf_registration_ding_provider_user() {
  return array(
    'user' => array(
      'required' => TRUE,
      'install time setup' => FALSE,
    ),
  );
}

/**
 * Check that the age limit is met.
 *
 * @param int $cpr
 *   A social security number.
 *
 * @return bool
 *   If the age limit is given and met TRUE else FALSE. If age limit is not
 *   given TRUE will always be returned.
 */
function _ding_gatewayf_registration_is_age_limit_met($cpr) {
  $config = _ding_gatewayf_registration_load_config();

  // Check if age limit should be set.
  $limit = $config['age_limit'];
  if (!empty($limit)) {

    // Magic function to get the 1900, 1800 or 2000 prefixes for year.
    // @see http://da.wikipedia.org/wiki/CPR-nummer
    $year = substr($cpr, 4, 2);
    switch (substr($cpr, 6, 1)) {
      case 0:
      case 1:
      case 2:
      case 3:
        $year = '19' . $year;
        break;

      case 4:
      case 9:
        $year = $year > 36 ? '19' . $year : '20' . $year;
        break;

      case 5:
      case 6:
      case 7:
      case 8:
        $year = $year > 57 ? '18' . $year : '20' . $year;
        break;
    }

    // Create date time object to use it's diff method. The 'tomorrow' is used
    // here to ensure that the user meets the age limit on the person birthday.
    $from = new DateTime();
    $from->setDate($year, substr($cpr, 2, 2), substr($cpr, 0, 2));
    $to = new DateTime('tomorrow');

    // Check if limit have been reached.
    if ($from->diff($to)->y < $limit) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Load self registration configuration with valid defaults.
 */
function _ding_gatewayf_registration_load_config() {
  return variable_get('ding_gatewayf_registration', array()) + array(
    'age_limit' => 18,
    'information' => array(
      'title' => t('Self registration'),
      'content' => array(
        'value' => t("Please read the library's regulations for usage before you use self registration."),
        'format' => 'ding_wysiwyg',
      ),
      'link' => t('Start self registration'),
    ),
    'acceptance' => array(
      'description' => array(
        'value' => t("I accept the library's regulations and rules."),
        'format' => 'ding_wysiwyg',
      ),
    ),
    'success' => array(
      'title' => t('Success'),
      'content' => array(
        'value' => t('You have been registered at the library as an user.'),
        'format' => 'ding_wysiwyg',
      ),
    ),
  );
}

/**
 * Check if the request is for self registration.
 */
function _ding_gatewayf_registration_is_registration_request() {
  return defined('DING_GATEWAYF_REGISTRATION_ACCEPTANCE_URL') && isset($_REQUEST['destination']) && $_REQUEST['destination'] == DING_GATEWAYF_REGISTRATION_ACCEPTANCE_URL;
}
